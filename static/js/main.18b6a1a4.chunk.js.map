{"version":3,"sources":["Header.js","Footer.js","Square.js","Board.js","TurnCounter.js","CalculateWinner.js","Game.js","Loading.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","src","alt","onSubmit","e","setIsLoggedIn","prevIsLoggedIn","setIsLoading","setTimeout","preventDefault","placeholder","type","value","user","onChange","event","setUser","target","onClick","Footer","Square","Board","positions","map","index","y","i","x","key","updateCPosition","TurnCounter","CalculateWinner","cPosition","p","turn","checkersTouching","left","push","Game","useState","setHistory","setCPosition","moving","setMoving","setTurn","enem","alert","clone","xMovement","Math","abs","yMovement","checkerCountX","checkerCountY","yList","q","xList","w","r","mrChecky1","mrChecky2","mrChecky3","mrChecky4","prev","concat","weCheck","mrChecky5","every","mrChecky6","mrChecky7","mrChecky8","Loading","App","isLoggedIn","isLoading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18b6a1a4.chunk.js","sourcesContent":["import React, {useState} from \"react\"\r\n\r\nfunction Header(props) {\r\n    function setIsLoggedIn(e){\r\n        props.setIsLoggedIn((prevIsLoggedIn) => prevIsLoggedIn ? false : true )\r\n        props.setIsLoading(() => {return true})\r\n        setTimeout(() => {\r\n            props.setIsLoading(\r\n              false);\r\n          }, 1500)\r\n        e.preventDefault()\r\n        }\r\n\r\n\r\n    function handleChange(event) {\r\n        props.setUser({value: event.target.value})\r\n      }\r\n\r\n    function setIsLoading(event) {\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <img src=\"https://img.icons8.com/cotton/100/000000/strategy-board.png\" alt=\"Lines of action logo\"/>\r\n            <form className=\"forms\" onSubmit={setIsLoggedIn}>\r\n                <div className=\"inputContainer\">\r\n                    <img className=\"icons\" src=\"https://img.icons8.com/material-outlined/96/000000/user--v1.png\" alt=\"user icon\" />\r\n                    <input placeholder=\"First Name\" type=\"text\" value={props.user.value} onChange={handleChange}/>\r\n                </div>\r\n                <div className=\"inputContainer\">\r\n                    <img className=\"icons\" src=\"https://img.icons8.com/windows/50/000000/key.png\" alt=\"key icon\"/>\r\n                    <input placeholder=\"Password\"  type=\"password\"/>\r\n                </div>\r\n                <button className=\"submitt\" type=\"submit\" onClick={setIsLoading}>Enter</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from \"react\"\r\n\r\nfunction Square(props) {\r\n    return(\r\n        // Squares pre loaded at the beginning of the game\r\n    <button className=\"square\">{props.value === null ? props.value : props.value[0]}</button>\r\n    )\r\n}\r\n\r\nexport default Square","import React from \"react\"\r\nimport Square from \"./Square.js\"\r\nfunction Board(props) {\r\n    return(\r\n         <div className=\"board\">\r\n             {props.positions.map((index, y) => \r\n                 index.map((i, x) => \r\n                 <div key={x} onClick={() => props.updateCPosition([x, y])} >\r\n                     <Square   \r\n                         value={props.positions[x][y]} \r\n                         className=\"square\"\r\n                         />\r\n                 </div>\r\n                 )\r\n             )}\r\n\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React from \"react\"\r\n\r\nfunction TurnCounter(props) {\r\n    return(\r\n        <div  className=\"turn\">\r\n           {//} <h1>It is currently {props.turn}'s turn</h1>\r\n}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TurnCounter\r\n","function CalculateWinner(positions, cPosition, p, turn, checkersTouching) {\r\n    for(let left = -1; left < 2; left++){\r\n        if(positions[p[0]-left][p[1]-1] === 'x' | positions[p[0]-left][p[1]-1] === 'o'){\r\n            checkersTouching.push(positions[p[0]-left][p[1]-1]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default CalculateWinner","import React, {useState} from \"react\"\r\nimport Board from \"./Board.js\"\r\nimport TurnCounter from \"./TurnCounter.js\"\r\nimport CalculateWinner from \"./CalculateWinner.js\"\r\nimport History from \"./History.js\"\r\n\r\nfunction Game(props) {\r\n    const [positions, setPositions] = useState([\r\n        [null, ['x', 1], ['x', 2], ['x', 3], ['x', 4], ['x', 5], ['x', 6], null],\r\n        [['o', 1], null, null, null, null, null, null, ['o', 2]],\r\n        [['o', 3], null, null, null, null, null, null, ['o', 4]],\r\n        [['o', 5], null, null, null, null, null, null, ['o', 6]],\r\n        [['o', 7], null, null, null, null, null, null, ['o', 8]],\r\n        [['o', 9], null, null, null, null, null, null, ['o', 10]],\r\n        [['o', 11], null, null, null, null, null, null, ['o', 12]],\r\n        [null, ['x', 7], ['x', 8], ['x', 9], ['x', 10], ['x', 11], ['x', 12], null],])\r\n    const [history, setHistory] =useState([\r\n                                            [\r\n                                                [null, ['x', 1], ['x', 2], ['x', 3], ['x', 4], ['x', 5], ['x', 6], null],\r\n                                                [['o', 1], null, null, null, null, null, null, ['o', 2]],\r\n                                                [['o', 3], null, null, null, null, null, null, ['o', 4]],\r\n                                                [['o', 5], null, null, null, null, null, null, ['o', 6]],\r\n                                                [['o', 7], null, null, null, null, null, null, ['o', 8]],\r\n                                                [['o', 9], null, null, null, null, null, null, ['o', 10]],\r\n                                                [['o', 11], null, null, null, null, null, null, ['o', 12]],\r\n                                                [null, ['x', 7], ['x', 8], ['x', 9], ['x', 10], ['x', 11], ['x', 12], null]\r\n                                            ],\r\n                                        ])\r\n\r\n    const [cPosition, setCPosition] = useState([])\r\n    const [moving, setMoving] = useState(false)\r\n    const [turn, setTurn] = useState(\"x\")\r\n    const [checkersTouching, setCheckersTouching] = useState([])\r\n    const updateCPosition = (p) => {\r\n        \r\n            switch(moving){\r\n                case true:\r\n                    const value = positions[cPosition[0]][cPosition[1]][0];\r\n                    if(value === null){\r\n                        alert(\"Illegal move! You cannot move an empty space!*1*\")\r\n                    } else {\r\n                        const clone = [...positions]\r\n                        const xMovement = Math.abs(p[0] - cPosition[0]);\r\n                        const yMovement = Math.abs(p[1] - cPosition[1]);\r\n                        let checkerCountX = 0;\r\n                        let checkerCountY = 0;\r\n                        let yList = positions.map((q) => q[p[1]]);\r\n                        let xList = positions[p[0]].map((w) => w);\r\n                        yList.map((r) => r === null ? null: checkerCountY++)\r\n                        xList.map((r) => r === null ? null: checkerCountX++)\r\n                        var enem = '';\r\n                        //Check movement for legality\r\n                        if(xMovement === yMovement){\r\n                            //Diagonal movement\r\n                            if(xMovement > 1){\r\n                                //Potentially jumping checkers\r\n                                if(p[0] > cPosition[0]){\r\n                                    //Moving Right\r\n                                    if(p[1] > cPosition[1]){\r\n                                        //Moving Up\r\n                                        for(let mrChecky1 = 1; mrChecky1 < xMovement ; mrChecky1++ ){\r\n                                            enem = clone[(p[0]-mrChecky1)][p[1]-mrChecky1]\r\n                                            if(enem === value | enem === null){\r\n                                                //Legal due to jumping friendly\r\n                                                if(checkerCountY === xMovement | checkerCountX === xMovement){\r\n                                                    if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                        //Friendly fire check\r\n                                                        alert(\"Illegal move! Friendly Fire!*2*\")\r\n                                                    }else {\r\n                                                        //Legal move\r\n                                                        clone[p[0]][p[1]] = value;\r\n                                                        clone[cPosition[0]][cPosition[1]] = null;\r\n                                                        setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                        CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n                                                    }\r\n                                                }else {\r\n                                                    //Movement amount and checker count are not the same\r\n                                                    alert(\"Illegal move! Movement amount and checker count must be the same. Try again*3*\")\r\n                                                }\r\n                                            } else{\r\n                                                //Attempted to jump over enemy checker\r\n                                                alert(\"Illegal move! Cannot jump enemy checkers. Try again*4*\")\r\n                                            }\r\n                                    }\r\n                                    //Moving Down\r\n                                    } if(p[1] < cPosition[1]){\r\n                                        for(let mrChecky2 = 1; mrChecky2 < xMovement; mrChecky2++){\r\n                                            enem = clone[(p[0]-mrChecky2)][p[1]+mrChecky2]\r\n                                            if(enem === value | enem === null){\r\n                                                //Legal due to jumping friendly or nothing\r\n                                                if(checkerCountY === xMovement | checkerCountX === xMovement){\r\n                                                    if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                        //Friendly fire check\r\n                                                        alert(\"Illegal move! Friendly Fire!*5*\")\r\n                                                    }else {\r\n                                                        //Legal move\r\n                                                    clone[p[0]][p[1]] = value;\r\n                                                    clone[cPosition[0]][cPosition[1]] = null;\r\n                                                    setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                    CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n                                                    }\r\n                                                }else {\r\n                                                    //Movement amount and checker count are not the same\r\n                                                    alert(\"Illegal move! Movement amount and checker count must be the same. Try again*6*\")\r\n                                                }\r\n                                            } else {\r\n                                                //Attempted to jump over enemy checker\r\n                                                alert(\"Illegal move! Cannot jump enemy checkers. Try again*7*\")\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else if(p[0] < cPosition[0]){\r\n                                    //Moving Left\r\n                                    if(p[1] > cPosition[1]){\r\n                                        //Moving Up\r\n                                        for(let mrChecky3 = 1; mrChecky3 < xMovement; mrChecky3++)\r\n                                        enem = clone[(p[0]+mrChecky3)][p[1]-mrChecky3]\r\n                                        if(enem === value | enem === null){\r\n                                            //Legal due to jumping friendly\r\n                                            if(checkerCountY === xMovement | checkerCountX === xMovement){\r\n                                                if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                    //Friendly fire check\r\n                                                    alert(\"Illegal move! Friendly Fire!*8*\")\r\n                                                }else {\r\n                                                    //Legal move\r\n                                                clone[p[0]][p[1]] = value;\r\n                                                clone[cPosition[0]][cPosition[1]] = null;\r\n                                                setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n                                                }\r\n                                            }else {\r\n                                                //Movement amount and checker count are not the same\r\n                                                alert(\"Illegal move! Movement amount and checker count must be the same. Try again*9*\")\r\n                                            }\r\n                                        } else{\r\n                                            //Attempted to jump over enemy checker\r\n                                            alert(\"Illegal move! Cannot jump enemy checkers. Try again*10*\")\r\n                                        }\r\n                                    //Moving Down\r\n                                    } if(p[1] < cPosition[1]){\r\n                                        for(let mrChecky4 = 1; mrChecky4 < xMovement; mrChecky4++){\r\n                                            enem = clone[(p[0]+mrChecky4)][p[1]+mrChecky4]\r\n                                            if(enem === value | enem === null){\r\n                                                //Legal due to jumping friendly\r\n                                                if(checkerCountY === xMovement | checkerCountX === xMovement){\r\n                                                    if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                        //Friendly fire check\r\n                                                        alert(\"Illegal move! Friendly Fire!*11*\")\r\n                                                    }else {\r\n                                                        //Legal move\r\n                                                    clone[p[0]][p[1]] = value;\r\n                                                    clone[cPosition[0]][cPosition[1]] = null;\r\n                                                    setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                    CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n                                                    setHistory((prev) => prev.concat([clone]));\r\n                                                    ;\r\n\r\n                                                    }\r\n                                                }else {\r\n                                                    //Movement amount and checker count are not the same\r\n                                                    alert(\"Illegal move! Movement amount and checker count must be the same. Try again*12*\")\r\n                                                }\r\n                                            } else {\r\n                                                //Attempted to jump over enemy checker\r\n                                                alert(\"Illegal move! Cannot jump enemy checkers. Try again*13*\")\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            } else {\r\n                                if(checkerCountY === xMovement | checkerCountX === xMovement){\r\n                                    if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                        //Friendly fire check\r\n                                        alert(\"Illegal move! Friendly Fire!*14*\")\r\n                                    }else {\r\n                                        //Legal move\r\n                                    clone[p[0]][p[1]] = value;\r\n                                    clone[cPosition[0]][cPosition[1]] = null;\r\n                                    setTurn(turn => turn === 'x'? 'o':'x');\r\n                                    CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n                                    \r\n                                    \r\n                                        \r\n\r\n\r\n                                    }\r\n                                }else {\r\n                                    //Movement amount and checker count are not the same\r\n                                    alert(\"Illegal move! Movement amount and checker count must be the same. Try again*15*\")\r\n                                }\r\n                            }\r\n                        } else if(xMovement === 0){\r\n                            //Vertical movement\r\n                            if(yMovement > 1){\r\n                                //Potential jump of checkers\r\n                                if(p[1] > cPosition[1]){\r\n                                    //Moving Up\r\n                                    let weCheck =[];\r\n                                    for(let mrChecky5 = 1; mrChecky5 < yMovement; mrChecky5++){\r\n                                        enem = enem = clone[(p[0])][p[1]-mrChecky5]\r\n                                        if(enem === value | enem === null){\r\n                                            //Jumping friendly or nothing\r\n                                            weCheck.push(true)\r\n                                        }\r\n                                    }\r\n                                        if(weCheck.every(()=> true)){\r\n                                            if(yMovement === checkerCountY | yMovement === checkerCountX){\r\n                                                //Check both directions for checker count\r\n                                                if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                    //Friendly fire\r\n                                                    alert(\"Illegal move! Friendly Fire!*16*\")\r\n                                                } else {\r\n                                                    //Legal move\r\n                                                    clone[p[0]][p[1]] = value;\r\n                                                    clone[cPosition[0]][cPosition[1]] = null;\r\n                                                    setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                    CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n                                                    \r\n                                                    \r\n                                                    \r\n\r\n                                                }\r\n                                            } else {\r\n                                                //Movement amount and checker count are not the same\r\n                                                alert(\"Illegal move! Movement amount and checker count must be the same. Try again*17*\")\r\n                                            }\r\n                                        } else {\r\n                                            //Jumping enemy checkers\r\n                                            alert(\"Illegal move! You cannot jump enemy checkers. Try again*18*\")\r\n                                        }\r\n                                    \r\n                                } else if(p[1] < cPosition[1]){\r\n                                    //Moving Down\r\n                                    for(let mrChecky6 = 1; mrChecky6 < yMovement; mrChecky6++){\r\n                                        enem = enem = clone[(p[0])][p[1]+mrChecky6]\r\n                                        if(enem === value | enem === null){\r\n                                            //Jumping friendly or nothing\r\n                                            if(yMovement === checkerCountY | yMovement === checkerCountX){\r\n                                                //Check both directions for checker count\r\n                                                if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                    //Friendly fire\r\n                                                    alert(\"Illegal move! Friendly Fire!*19*\")\r\n                                                } else {\r\n                                                    //Legal move\r\n                                                clone[p[0]][p[1]] = value;\r\n                                                clone[cPosition[0]][cPosition[1]] = null;\r\n                                                setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n\r\n                                                \r\n                                                \r\n                                        \r\n                                                ;\r\n\r\n\r\n\r\n                                                }\r\n                                            } else {\r\n                                                //Movement amount and checker count are not the same\r\n                                                alert(\"Illegal move! Movement amount and checker count must be the same. Try again*20*\")\r\n                                            }\r\n                                        } else {\r\n                                            //Jumping enemy checkers\r\n                                            alert(\"Illegal move! You cannot jump enemy checkers. Try again*21*\")\r\n                                        }\r\n                                    }\r\n                                } \r\n                            } else {\r\n                                    if(yMovement === checkerCountY | yMovement === checkerCountX){\r\n                                        //Check both directions for checker count\r\n                                        if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                            //Friendly fire\r\n                                            alert(\"Illegal move! Friendly Fire!*22*\")\r\n                                        } else {\r\n                                            //Legal move\r\n                                        clone[p[0]][p[1]] = value;\r\n                                        clone[cPosition[0]][cPosition[1]] = null;\r\n                                        setTurn(turn => turn === 'x'? 'o':'x');\r\n                                        CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n\r\n                                        \r\n                                        \r\n                                            \r\n                                        ;\r\n\r\n\r\n\r\n                                        }\r\n                                    } else {\r\n                                        //Movement amount and checker count are not the same\r\n                                        alert(\"Illegal move! Movement amount and checker count must be the same. Try again*23*\")\r\n                                    }\r\n                                }\r\n                                \r\n                                \r\n                        } else if(yMovement === 0){\r\n                            //Lateral movement\r\n                            if(xMovement > 1){\r\n                                //Potential jump of checkers\r\n                                if(p[0] > cPosition[0]){\r\n                                    //Moving Right\r\n                                    for(let mrChecky7 = 1; mrChecky7 < xMovement; mrChecky7++){\r\n                                        enem = enem = clone[(p[0]-mrChecky7)][p[1]]\r\n                                        if(enem === value | enem === null){\r\n                                            //Jumping friendly or nothing\r\n                                            if(xMovement === checkerCountY | xMovement === checkerCountX){\r\n                                                //Check both directions for checker count\r\n                                                if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                    //Friendly fire\r\n                                                    alert(\"Illegal move! Friendly Fire!*24*\")\r\n                                                } else {\r\n                                                    //Legal move\r\n                                                clone[p[0]][p[1]] = value;\r\n                                                clone[cPosition[0]][cPosition[1]] = null;\r\n                                                setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n\r\n                                                \r\n                                                \r\n                                                    \r\n                                                ;\r\n\r\n\r\n\r\n                                                }\r\n                                            } else {\r\n                                                //Movement amount and checker count are not the same\r\n                                                alert(\"Illegal move! Movement amount and checker count must be the same. Try again*25*\")\r\n                                            }\r\n                                        } else {\r\n                                            //Jumping enemy checkers\r\n                                            alert(\"Illegal move! You cannot jump enemy checkers. Try again*26*\")\r\n                                        }\r\n                                    }\r\n                                } else if(p[0] < cPosition[0]){\r\n                                    //Moving Left\r\n                                    for(let mrChecky8 = 1; mrChecky8 < xMovement; mrChecky8++){\r\n                                        enem = enem = clone[(p[0]+mrChecky8)][p[1]]\r\n                                        if(enem === value | enem === null){\r\n                                            //Jumping friendly or nothing\r\n                                            if(xMovement === checkerCountY | xMovement === checkerCountX){\r\n                                                //Check both directions for checker count\r\n                                                if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                                    //Friendly fire\r\n                                                    alert(\"Illegal move! Friendly Fire!*27*\")\r\n                                                } else {\r\n                                                    //Legal move\r\n                                                clone[p[0]][p[1]] = value;\r\n                                                clone[cPosition[0]][cPosition[1]] = null;\r\n                                                setTurn(turn => turn === 'x'? 'o':'x');\r\n                                                CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n\r\n                                                }\r\n                                            } else {\r\n                                                //Movement amount and checker count are not the same\r\n                                                alert(\"Illegal move! Movement amount and checker count must be the same. Try again*28*\")\r\n                                            }\r\n                                        } else {\r\n                                            //Jumping enemy checkers\r\n                                            alert(\"Illegal move! You cannot jump enemy checkers. Try again*29*\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if(yMovement === checkerCountY | yMovement === checkerCountX){\r\n                                    //Check both directions for checker count\r\n                                    if(clone[p[0]][p[1]] === clone[cPosition[0]][cPosition[1]]){\r\n                                        //Friendly fire\r\n                                        alert(\"Illegal move! Friendly Fire!*30*\")\r\n                                    } else {\r\n                                        //Legal move\r\n                                    clone[p[0]][p[1]] = value;\r\n                                    clone[cPosition[0]][cPosition[1]] = null;\r\n                                    setTurn(turn => turn === 'x'? 'o':'x');\r\n                                    CalculateWinner(positions, cPosition, p, turn, checkersTouching);\r\n                                    }\r\n                                } else {\r\n                                    //Movement amount and checker count are not the same\r\n                                    alert(\"Illegal move! Movement amount and checker count must be the same. Try again*31*\")\r\n                                }\r\n                            }\r\n                            \r\n\r\n                        } else {\r\n                            //Not a direct line of movement thus illegal\r\n                            alert(\"Illegal move! Movement must be in a straight line. Try again*32*\")\r\n                        }\r\n\r\n                    }\r\n                    //setHistory((prev) =>{ \r\n                    //    console.log(prev);\r\n                    //    prev.concat([positions]);\r\n                    //    console.log(prev)\r\n                    //}\r\n                    //    );\r\n                    setMoving(false)\r\n                    break;\r\n                case false: \r\n                    setCPosition(p)\r\n                    setMoving(true)\r\n                    break;\r\n                \r\n            }\r\n            \r\n    }\r\n\r\n    //<History setPositions={setPositions} positions={positions} history={history} setHistory={setHistory}/>\r\n    \r\n\r\n    return (\r\n        <div >\r\n            <h1 className=\"loalogo\">Welcome to {props.user.value}'s game of Lines of Action!</h1>\r\n            <Board className=\"game\" positions={positions} updateCPosition={updateCPosition}/>\r\n            <TurnCounter turn={turn}/>\r\n            {turn === \"x\" ? <h1 className=\"background\">{turn}</h1>: <h1 className=\"background2\">{turn}</h1>}\r\n        </div>   \r\n    )\r\n}\r\n\r\nexport default Game","import React from \"react\"\r\n\r\nfunction Loading() {\r\n    return(\r\n        <div className=\"loadingPage\">\r\n            <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading","import React, {useState} from 'react';\nimport './App.css';\nimport Header from \"./Header.js\";\nimport Footer from \"./Footer.js\";\nimport Game from \"./Game.js\";\nimport Loading from \"./Loading.js\"\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [user, setUser] = useState({value: ''});\n  return (\n    <div className=\"App\">\n      {isLoading ? <Loading /> : isLoggedIn ? <Game user={user} setUser={setUser}/> : <Header user={user} setUser={setUser} setIsLoading={setIsLoading} isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />}\n      \n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}